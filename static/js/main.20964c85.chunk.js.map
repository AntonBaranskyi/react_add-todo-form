{"version":3,"sources":["api/users.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["id","name","username","email","UserInfo","user","className","href","TodoInfo","todo","classNames","completed","title","TodoList","todos","map","posts","userId","usersFromServer","find","person","App","useState","setTodos","titleField","setTitleField","userName","setUserName","errorTitle","setErrorTitle","errorName","setErrorName","action","method","onSubmit","event","preventDefault","nextId","Math","max","objToAdd","prev","htmlFor","type","value","onChange","target","placeholder","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.20964c85.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import React from 'react';\nimport { User } from '../../types/User';\n\ntype Props = {\n  user: User;\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  return (\n    <a className=\"UserInfo\" href={`mailto:${user.email}`}>\n      {user.name}\n    </a>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/ToDo';\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  return (\n    <article\n      data-id={todo.id}\n      className={classNames('TodoInfo', {\n        'TodoInfo--completed': todo.completed,\n      })}\n    >\n      <h2 className=\"TodoInfo__title\">{todo.title}</h2>\n\n      {todo.user && <UserInfo user={todo.user} />}\n    </article>\n  );\n};\n","import React from 'react';\nimport { Todo } from '../../types/ToDo';\nimport { TodoInfo } from '../TodoInfo';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map((todo) => (\n        <TodoInfo key={todo.id} todo={todo} />\n      ))}\n    </section>\n  );\n};\n","import './App.scss';\n\nimport React, { useState } from 'react';\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { TodoList } from './components/TodoList';\nimport { Todo } from './types/ToDo';\n\nconst posts = todosFromServer.map((todo) => {\n  const user = usersFromServer.find((person) => person.id === todo.userId);\n\n  return { ...todo, user };\n});\n\nexport const App = () => {\n  const [todos, setTodos] = useState<Todo[]>(posts);\n  const [titleField, setTitleField] = useState('');\n  const [userName, setUserName] = useState('');\n\n  const [errorTitle, setErrorTitle] = useState(false);\n  const [errorName, setErrorName] = useState(false);\n\n  const addPost = (todo: Todo) => {\n    setTodos((prev) => [...prev, todo]);\n  };\n\n  const onChangeTitle = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitleField(event.target.value);\n    setErrorTitle(false);\n  };\n\n  const onChangeName = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setUserName(event.target.value);\n    setErrorName(false);\n  };\n\n  const reset = () => {\n    setUserName('');\n    setTitleField('');\n\n    setErrorName(false);\n    setErrorTitle(false);\n  };\n\n  const sendPost = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const nextId = Math.max(...todos.map((todo) => todo.id)) + 1;\n\n    if (!titleField) {\n      setErrorTitle(true);\n    }\n\n    if (!userName) {\n      setErrorName(true);\n    }\n\n    if (!titleField || !userName) {\n      return;\n    }\n\n    const objToAdd = {\n      id: +nextId,\n      title: titleField,\n      completed: false,\n      userId: nextId,\n      user: usersFromServer.find((user) => user.name === userName) || null,\n    };\n\n    addPost(objToAdd);\n\n    reset();\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"box\">\n        <h1>Add todo form</h1>\n\n        <form action=\"/api/todos\" method=\"POST\" onSubmit={sendPost}>\n          <div className=\"field\">\n            <label className=\"mr-2\" htmlFor=\"title\">\n              Title:\n            </label>\n            <input\n              id=\"title\"\n              type=\"text\"\n              data-cy=\"titleInput\"\n              value={titleField}\n              onChange={onChangeTitle}\n              placeholder=\"Enter a title\"\n            />\n            {errorTitle && <span className=\"error\">Please enter a title</span>}\n          </div>\n\n          <div className=\"field\">\n            <label className=\"mr-2\" htmlFor=\"user\">\n              User:\n            </label>\n            <select\n              id=\"user\"\n              onChange={onChangeName}\n              data-cy=\"userSelect\"\n              value={userName}\n            >\n              <option value=\"\">Choose a user</option>\n              {usersFromServer.map((user) => (\n                <option key={user.id} value={user.name}>\n                  {user.name}\n                </option>\n              ))}\n            </select>\n\n            {errorName && <span className=\"error\">Please choose a user</span>}\n          </div>\n\n          <button type=\"submit\" data-cy=\"submitButton\">\n            Add\n          </button>\n        </form>\n\n        <TodoList todos={todos} />\n      </div>\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}